{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gqw2714\\\\sai-portfolio\\\\src\\\\components\\\\Slider.js\";\n\n/** @jsx jsx */\nimport React, { useState, useEffect, useRef } from 'react';\nimport { css, jsx } from '@emotion/core';\nimport SliderContent from './SliderContent';\nimport Slide from './Slide';\nimport Arrow from './Arrow';\nimport Dots from './Dots';\n/**\r\n * @function Slider\r\n *\r\n * - For reference, the slides variable always refers to props.slides. _slides, will always\r\n *   refer to the internal variable set in state.\r\n *\r\n *  @todo\r\n * - Handle resizing.\r\n * - Instead of recreating the css event listener each time, perhaps it can be set once somehow.\r\n */\n\nconst Slider = props => {\n  const getWidth = () => window.innerWidth;\n\n  const contentRef = useRef();\n  const {\n    slides\n  } = props;\n  const [state, setState] = useState({\n    activeIndex: 0,\n    translate: getWidth(),\n    transition: 0.45,\n    _slides: [slides[slides.length - 1], ...slides, slides[0]]\n  });\n  const {\n    activeIndex,\n    translate,\n    _slides,\n    transition\n  } = state;\n  /** smoothTransition */\n\n  const smoothTransition = () => {\n    if (activeIndex === 0 && translate > getWidth()) return setState({ ...state,\n      transition: 0,\n      translate: getWidth()\n    });\n\n    if (activeIndex === slides.length - 1 && translate === 0) {\n      return setState({ ...state,\n        transition: 0,\n        translate: getWidth() * slides.length\n      });\n    }\n  };\n  /** Listen for CSS transform transition. */\n\n\n  useEffect(() => {\n    contentRef.current.addEventListener('transitionend', smoothTransition);\n    return () => contentRef.current.removeEventListener('transitionend', smoothTransition);\n  }, [activeIndex]);\n  /** Reset transition once we have positioned the translate to it's proper value. */\n\n  useEffect(() => {\n    if (transition === 0) {\n      setState({ ...state,\n        transition: 0.45\n      });\n    }\n  }, [transition]);\n  /** nextSlide */\n\n  const nextSlide = () => {\n    const next = (activeIndex + 2) * getWidth();\n\n    if (activeIndex === slides.length - 1) {\n      return setState({ ...state,\n        activeIndex: 0,\n        translate: next\n      });\n    }\n\n    setState({ ...state,\n      activeIndex: activeIndex + 1,\n      translate: next\n    });\n  };\n  /** prevSlide */\n\n\n  const prevSlide = () => {\n    const prev = activeIndex * getWidth();\n\n    if (activeIndex === 0) {\n      return setState({ ...state,\n        activeIndex: slides.length - 1,\n        translate: prev\n      });\n    }\n\n    setState({ ...state,\n      activeIndex: activeIndex - 1,\n      translate: prev\n    });\n  };\n\n  return jsx(\"div\", {\n    css: SliderCSS,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, jsx(SliderContent, {\n    ref: contentRef,\n    translate: translate,\n    transition: transition,\n    width: getWidth() * _slides.length,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, _slides.map((_slide, i) => jsx(Slide, {\n    key: _slide + i,\n    content: _slide,\n    images: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }))), jsx(Arrow, {\n    direction: \"left\",\n    handleClick: prevSlide,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }), jsx(Arrow, {\n    direction: \"right\",\n    handleClick: nextSlide,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }), jsx(Dots, {\n    slides: slides,\n    activeIndex: activeIndex,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }));\n};\n\nconst SliderCSS = css`\n  position: relative;\n  height: 100vh;\n  width: 100vw;\n  margin: 0 auto;\n  overflow: hidden;\n  white-space: nowrap;\n`;\nexport default Slider;","map":{"version":3,"sources":["C:/Users/gqw2714/sai-portfolio/src/components/Slider.js"],"names":["React","useState","useEffect","useRef","css","jsx","SliderContent","Slide","Arrow","Dots","Slider","props","getWidth","window","innerWidth","contentRef","slides","state","setState","activeIndex","translate","transition","_slides","length","smoothTransition","current","addEventListener","removeEventListener","nextSlide","next","prevSlide","prev","SliderCSS","map","_slide","i"],"mappings":"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","sourcesContent":["/** @jsx jsx */\r\nimport React, { useState, useEffect, useRef } from 'react'\r\nimport { css, jsx } from '@emotion/core'\r\nimport SliderContent from './SliderContent'\r\nimport Slide from './Slide'\r\nimport Arrow from './Arrow'\r\nimport Dots from './Dots'\r\n\r\n/**\r\n * @function Slider\r\n *\r\n * - For reference, the slides variable always refers to props.slides. _slides, will always\r\n *   refer to the internal variable set in state.\r\n *\r\n *  @todo\r\n * - Handle resizing.\r\n * - Instead of recreating the css event listener each time, perhaps it can be set once somehow.\r\n */\r\nconst Slider = props => {\r\n  const getWidth = () => window.innerWidth\r\n  const contentRef = useRef()\r\n\r\n  const { slides } = props\r\n\r\n  const [state, setState] = useState({\r\n    activeIndex: 0,\r\n    translate: getWidth(),\r\n    transition: 0.45,\r\n    _slides: [slides[slides.length - 1], ...slides, slides[0]]\r\n  })\r\n\r\n  const { activeIndex, translate, _slides, transition } = state\r\n\r\n  /** smoothTransition */\r\n  const smoothTransition = () => {\r\n    if (activeIndex === 0 && translate > getWidth())\r\n      return setState({ ...state, transition: 0, translate: getWidth() })\r\n\r\n    if (activeIndex === slides.length - 1 && translate === 0) {\r\n      return setState({\r\n        ...state,\r\n        transition: 0,\r\n        translate: getWidth() * slides.length\r\n      })\r\n    }\r\n  }\r\n\r\n  /** Listen for CSS transform transition. */\r\n  useEffect(() => {\r\n    contentRef.current.addEventListener('transitionend', smoothTransition)\r\n    return () =>\r\n      contentRef.current.removeEventListener('transitionend', smoothTransition)\r\n  }, [activeIndex])\r\n\r\n  /** Reset transition once we have positioned the translate to it's proper value. */\r\n  useEffect(() => {\r\n    if (transition === 0) {\r\n      setState({ ...state, transition: 0.45 })\r\n    }\r\n  }, [transition])\r\n\r\n  /** nextSlide */\r\n  const nextSlide = () => {\r\n    const next = (activeIndex + 2) * getWidth()\r\n\r\n    if (activeIndex === slides.length - 1) {\r\n      return setState({\r\n        ...state,\r\n        activeIndex: 0,\r\n        translate: next\r\n      })\r\n    }\r\n\r\n    setState({\r\n      ...state,\r\n      activeIndex: activeIndex + 1,\r\n      translate: next\r\n    })\r\n  }\r\n\r\n  /** prevSlide */\r\n  const prevSlide = () => {\r\n    const prev = activeIndex * getWidth()\r\n\r\n    if (activeIndex === 0) {\r\n      return setState({\r\n        ...state,\r\n        activeIndex: slides.length - 1,\r\n        translate: prev\r\n      })\r\n    }\r\n\r\n    setState({\r\n      ...state,\r\n      activeIndex: activeIndex - 1,\r\n      translate: prev\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div css={SliderCSS}>\r\n      <SliderContent\r\n        ref={contentRef}\r\n        translate={translate}\r\n        transition={transition}\r\n        width={getWidth() * _slides.length}\r\n      >\r\n        {_slides.map((_slide, i) => (\r\n          <Slide key={_slide + i} content={_slide} images />\r\n        ))}\r\n      </SliderContent>\r\n\r\n      <Arrow direction=\"left\" handleClick={prevSlide} />\r\n      <Arrow direction=\"right\" handleClick={nextSlide} />\r\n\r\n      <Dots slides={slides} activeIndex={activeIndex} />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst SliderCSS = css`\r\n  position: relative;\r\n  height: 100vh;\r\n  width: 100vw;\r\n  margin: 0 auto;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n`\r\n\r\nexport default Slider\r\n"]},"metadata":{},"sourceType":"module"}